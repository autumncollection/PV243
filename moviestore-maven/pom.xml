<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.pv243.projekt</groupId>
  <artifactId>moviestore</artifactId>
  <packaging>war</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>moviestore Maven Webapp</name>
  <url>http://maven.apache.org</url>
  
   <properties>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <javaee6.web.spec.version>2.0.0.Final</javaee6.web.spec.version>
      <jbossas.version>7.1.1.Final</jbossas.version>
   </properties>
         <repositories>
        <repository>
            <url>http://download.eclipse.org/rt/eclipselink/maven.repo/</url>
            <id>eclipselink</id>
            <layout>default</layout>
            <name>Repository for library Library[eclipselink]</name>
    </repository>
	 <repository>
            <id>JBoss</id>
            <name>JBoss Repository</name>
            <url>https://repository.jboss.org/nexus/content/groups/public/</url>
        </repository>
    
      </repositories>
      

   <dependencyManagement>
      <dependencies>
         <!-- JBoss distributes a complete set of Java EE 6 APIs including
a Bill of Materials (BOM). A BOM specifies the versions of a "stack" (or
a collection) of artifacts. We use this here so that we always get the correct
versions of artifacts. Here we use the jboss-javaee-web-6.0 stack (you can
read this as the JBoss stack of the Java EE Web Profile 6 APIs) -->
        <dependency>
            <groupId>org.jboss.spec</groupId>
            <artifactId>jboss-javaee-web-6.0</artifactId>
            <version>${javaee6.web.spec.version}</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
      </dependencies>
   </dependencyManagement>

   <dependencies>
      <!-- First declare the APIs we depend on and need for compilation.
All of them are provided by JBoss AS 7 -->
      <dependency>
         <groupId>javax.enterprise</groupId>
         <artifactId>cdi-api</artifactId>
         <scope>provided</scope>
      </dependency>
      
      <dependency>
	<groupId>javax.mail</groupId>
	<artifactId>mail</artifactId>
	<version>1.4.5</version>
</dependency>
<dependency>
            <groupId>org.glassfish.extras</groupId>
            <artifactId>glassfish-embedded-all</artifactId>
            <version>3.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-container</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.container</groupId>
            <artifactId>arquillian-glassfish-embedded-3.1</artifactId>
            <version>1.0.0.Final-SNAPSHOT</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>eclipselink</artifactId>
            <version>2.3.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>javax.persistence</artifactId>
            <version>2.0.3</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>org.eclipse.persistence.jpa.modelgen.processor</artifactId>
            <version>2.3.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.10</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-web-api</artifactId>
            <version>6.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.18</version>
            <scope>test</scope>
        </dependency>
            
      
      <dependency>
         <groupId>org.jboss.spec.javax.faces</groupId>
         <artifactId>jboss-jsf-api_2.0_spec</artifactId>
         <scope>provided</scope>
      </dependency>

      <dependency>
         <groupId>org.jboss.spec.javax.annotation</groupId>
         <artifactId>jboss-annotations-api_1.1_spec</artifactId>
         <scope>provided</scope>
      </dependency>

      <dependency>
         <groupId>org.jboss.spec.javax.ws.rs</groupId>
         <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
         <scope>provided</scope>
      </dependency>

      <dependency>
         <groupId>org.hibernate.javax.persistence</groupId>
         <artifactId>hibernate-jpa-2.0-api</artifactId>
         <scope>provided</scope>
      </dependency>

      <dependency>
         <groupId>org.jboss.spec.javax.ejb</groupId>
         <artifactId>jboss-ejb-api_3.1_spec</artifactId>
         <scope>provided</scope>
      </dependency>

      <dependency>
         <groupId>org.hibernate</groupId>
         <artifactId>hibernate-validator</artifactId>
         <version>4.2.0.Final</version>
         <scope>provided</scope>
         <exclusions>
            <exclusion>
               <groupId>org.slf4j</groupId>
               <artifactId>slf4j-api</artifactId>
            </exclusion>
         </exclusions>
      </dependency>

      <!-- Needed for running tests (you may also use TestNG) -->
      <dependency>
         <groupId>junit</groupId>
         <artifactId>junit</artifactId>
         <version>4.10</version>
         <scope>test</scope>
      </dependency>

      <!-- Optional, but highly recommended -->
      <!-- Arquillian allows you to test enterprise code such as EJBs and
Transactional(JTA) JPA from JUnit/TestNG -->
      <dependency>
         <groupId>org.jboss.arquillian.junit</groupId>
         <artifactId>arquillian-junit-container</artifactId>
         <version>1.0.0.CR7</version>
         <scope>test</scope>
      </dependency>
      
      <dependency>
         <groupId>org.jboss.arquillian.protocol</groupId>
         <artifactId>arquillian-protocol-servlet</artifactId>
         <version>1.0.0.CR7</version>
         <scope>test</scope>
      </dependency>

   </dependencies>

   <build>
      <!-- Maven will append the version to the finalName (which is the name
given to the generated war, and hence the context root) -->
      <finalName>${project.artifactId}</finalName>
      <plugins>
         <!-- Compiler plugin enforces Java 1.6 compatibility and activates
annotation processors -->
         <plugin>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>2.3.1</version>
            <configuration>
               <source>1.6</source>
               <target>1.6</target>
            </configuration>
         </plugin>
         <plugin>
            <artifactId>maven-war-plugin</artifactId>
            <version>2.1.1</version>
            <configuration>
               <!-- Java EE 6 doesn't require web.xml, Maven needs to catch
up! -->
               <failOnMissingWebXml>false</failOnMissingWebXml>
            </configuration>
         </plugin>
         <!-- The JBoss AS plugin deploys your war to a local JBoss AS container -->
         <!-- To use, set the JBOSS_HOME environment variable and run: mvn
package jboss-as:deploy -->
         <plugin>
            <groupId>org.jboss.as.plugins</groupId>
            <artifactId>jboss-as-maven-plugin</artifactId>
            <version>${jbossas.version}</version>
         </plugin>
      </plugins>
   </build>

   <profiles>
      <profile>
         <!-- We add the JBoss repository as we need the JBoss AS connectors
for Arquillian -->
         <repositories>
            <!-- The JBoss Community public repository is a composite repository
of several major repositories -->
            <!-- see http://community.jboss.org/wiki/MavenGettingStarted-Users -->
            <repository>
               <id>jboss-public-repository</id>
               <name>JBoss Repository</name>
               <url>http://repository.jboss.org/nexus/content/groups/public</url>
               <!-- These optional flags are designed to speed up your builds
by reducing remote server calls -->
               <releases>
               </releases>
               <snapshots>
                  <enabled>false</enabled>
               </snapshots>
            </repository>
         </repositories>

         <pluginRepositories>
            <pluginRepository>
               <id>jboss-public-repository</id>
               <name>JBoss Repository</name>
               <url>http://repository.jboss.org/nexus/content/groups/public</url>
               <releases>
               </releases>
               <snapshots>
                  <enabled>false</enabled>
               </snapshots>
            </pluginRepository>
         </pluginRepositories>

         <!-- An optional Arquillian testing profile that executes tests
in your JBoss AS instance -->
         <!-- This profile will start a new JBoss AS instance, and execute
the test, shutting it down when done -->
         <!-- Run with: mvn clean test -Parq-jbossas-managed -->
         <id>arq-jbossas-managed</id>
         <dependencies>
            <dependency>
               <groupId>org.jboss.as</groupId>
               <artifactId>jboss-as-arquillian-container-managed</artifactId>
               <version>${jbossas.version}</version>
               <scope>test</scope>
            </dependency>
         </dependencies>
      </profile>

      <profile>
         <!-- We add the JBoss repository as we need the JBoss AS connectors
for Arquillian -->
         <repositories>
            <!-- The JBoss Community public repository is a composite repository
of several major repositories -->
            <!-- see http://community.jboss.org/wiki/MavenGettingStarted-Users -->
            <repository>
               <id>jboss-public-repository</id>
               <name>JBoss Repository</name>
               <url>http://repository.jboss.org/nexus/content/groups/public</url>
               <!-- These optional flags are designed to speed up your builds
by reducing remote server calls -->
               <releases>
               </releases>
               <snapshots>
                  <enabled>false</enabled>
               </snapshots>
            </repository>
         </repositories>

         <pluginRepositories>
            <pluginRepository>
               <id>jboss-public-repository</id>
               <name>JBoss Repository</name>
               <url>http://repository.jboss.org/nexus/content/groups/public</url>
               <releases>
               </releases>
               <snapshots>
                  <enabled>false</enabled>
               </snapshots>
            </pluginRepository>
         </pluginRepositories>

         <!-- An optional Arquillian testing profile that executes tests
in a remote JBoss AS instance -->
         <!-- Run with: mvn clean test -Parq-jbossas-remote -->
         <id>arq-jbossas-remote</id>
         <activation>
            <activeByDefault>true</activeByDefault>
         </activation>
         <dependencies>
            <dependency>
               <groupId>org.jboss.as</groupId>
               <artifactId>jboss-as-arquillian-container-remote</artifactId>
               <version>${jbossas.version}</version>
               <scope>test</scope>
            </dependency>
         </dependencies>
      </profile>
      
      <profile>
         <!-- When built in OpenShift the 'openshift' profile will be used when invoking mvn. -->
         <!-- Use this profile for any OpenShift specific customization your app will need. -->
         <!-- By default that is to put the resulting archive into the 'deployments' folder. -->
         <!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
         <id>openshift</id>
         <build>
            <plugins>
               <plugin>
                  <artifactId>maven-war-plugin</artifactId>
                  <version>2.1.1</version>
                  <configuration>
                     <outputDirectory>deployments</outputDirectory>
                     <warName>ROOT</warName>
                  </configuration>
               </plugin>
            </plugins>
         </build>
      </profile>

   </profiles>

</project>
